image:
  # -- Image registry, defaults to empty, which results in DockerHub usage
  registry: ""
  # -- Repository location of the Trino image, typically `organization/imagename`
  repository: trinodb/trino
  # -- Image tag, defaults to the Trino release version specified as `appVersion` from Chart.yaml
  tag: "476"
  # -- Optional digest value of the image specified as `sha256:abcd...`. A specified value overrides `tag`.
  digest: ""
  # -- When true, only the content in `repository` is used as image reference
  useRepositoryAsSoleImageReference: false
  pullPolicy: IfNotPresent

additionalCatalogs: #{} 
  # iceberg: |
  #   connector.name=iceberg
  #   iceberg.catalog.type=jdbc
  #   iceberg.jdbc-catalog.catalog-name=trino-iceberg
  #   iceberg.jdbc-catalog.driver-class=org.postgresql.Driver
  #   iceberg.jdbc-catalog.connection-url=jdbc:postgresql://postgresql.orb.local:5432/postgres
  #   iceberg.jdbc-catalog.connection-user=postgres
  #   iceberg.jdbc-catalog.connection-password=Sa12345678
  #   iceberg.jdbc-catalog.default-warehouse-dir=s3://warehouse
  #   fs.native-s3.enabled=true
  #   s3.aws-access-key=console
  #   s3.aws-secret-key=console123
  #   s3.endpoint=http://minio.default.svc.cluster.local:9000
  #   s3.path-style-access=true
  #   s3.region=us-east-1
  deltalake: |
    connector.name=delta_lake
    hive.metastore.uri=thrift://metastore-hive-metastore.default.svc.cluster.local:9083
    fs.native-s3.enabled=true
    s3.aws-access-key=console
    s3.aws-secret-key=console123
    s3.endpoint=http://minio.default.svc.cluster.local:9000
    s3.path-style-access=true
    s3.region=us-east-1
    delta.vacuum.min-retention=1m
  iceberg: |
    connector.name=iceberg
    hive.metastore.uri=thrift://metastore-hive-metastore.default.svc.cluster.local:9083
    iceberg.register-table-procedure.enabled=true
    iceberg.remove-orphan-files.min-retention=1d
    iceberg.expire-snapshots.min-retention=1d
    fs.native-s3.enabled=true
    s3.aws-access-key=console
    s3.aws-secret-key=console123
    s3.endpoint=http://minio.default.svc.cluster.local:9000
    s3.path-style-access=true
    s3.region=us-east-1

service:
  type: ClusterIP
  #type: NodePort
  port: 8080

ingress:
  enabled: true
  className: "traefik"
  annotations: {}
  hosts: #[]
    - host: trino.example.local
      paths:
        - path: /
          pathType: Prefix

additionalConfigProperties: #{}
  - internal-communication.shared-secret=abcd1234
  - "spill-enabled=true"
  - "spiller-spill-path=/tmp"
  - "spill-compression-enabled=true"
  - "http-server.process-forwarded=true"
  - "http-server.authentication.allow-insecure-over-http=true"

auth: #{}
  # test/password1234
  passwordAuth: "test:$2a$08$cXoC0nieTxl1VNomrxwvreZkvl0jQDvP2/zQNzAPaC8O3Y6mHiKdS"

authenticationType: "PASSWORD"

server:
  workers: 2
  node:
    environment: production
    dataDir: /data/trino
    pluginDir: /usr/lib/trino/plugin
  log:
    trino:
      level: INFO
  config:
    path: /etc/trino
    http:
      port: 8080
    https:
      enabled: false
      port: 8443
      keystore:
        path: ""
    # Trino supports multiple authentication types: PASSWORD, CERTIFICATE, OAUTH2, JWT, KERBEROS
    # For more info: https://trino.io/docs/current/security/authentication-types.html
    authenticationType: "PASSWORD"
    query:
      maxMemory: "8GB"
  exchangeManager:
    name: "filesystem"
    baseDir: "/tmp/trino-local-file-system-exchange-manager"
  workerExtraConfig: ""
  coordinatorExtraConfig: ""
  autoscaling:
    enabled: false
    maxReplicas: 5
    targetCPUUtilizationPercentage: 50
    behavior: {}
    #  scaleDown:
    #    stabilizationWindowSeconds: 300
    #    policies:
    #    - type: Percent
    #      value: 100
    #      periodSeconds: 15
    #  scaleUp:
    #    stabilizationWindowSeconds: 0
    #    policies:
    #    - type: Percent
    #      value: 100
    #      periodSeconds: 15
    #    - type: Pods
    #      value: 4
    #      periodSeconds: 15
    #    selectPolicy: Max

worker:
  jvm:
    maxHeapSize: "16G"
    gcMethod:
      type: "UseG1GC"
      g1:
        heapRegionSize: "32M"

  config:
    memory:
      heapHeadroomPerNode: ""
    query:
      maxMemoryPerNode: "8GB"